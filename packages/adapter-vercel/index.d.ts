import { Adapter } from '@sveltejs/kit';
import './ambient.js';

export default function plugin(config?: Config): Adapter;

export interface ServerlessConfig {
	/**
	 * Whether to use [Edge Functions](https://vercel.com/docs/concepts/functions/edge-functions) (`'edge'`) or [Serverless Functions](https://vercel.com/docs/concepts/functions/serverless-functions) (`'nodejs18.x'`, `'nodejs20.x'` etc).
	 * @default Same as the build environment
	 * @deprecated
	 */
	runtime?: `nodejs${number}.x`;
	/**
	 * To which regions to deploy the app. A list of regions.
	 * More info: https://vercel.com/docs/concepts/edge-network/regions
	 */
	regions?: string[];
	/**
	 * Maximum execution duration (in seconds) that will be allowed for the Serverless Function.
	 * Serverless only.
	 */
	maxDuration?: number;
	/**
	 * Amount of memory (RAM in MB) that will be allocated to the Serverless Function.
	 * Serverless only.
	 */
	memory?: number;
	/**
	 * If `true`, this route will always be deployed as its own separate function
	 */
	split?: boolean;

	/**
	 * [Incremental Static Regeneration](https://vercel.com/docs/concepts/incremental-static-regeneration/overview) configuration.
	 * Serverless only.
	 */
	isr?:
		| {
				/**
				 * Expiration time (in seconds) before the cached asset will be re-generated by invoking the Serverless Function. Setting the value to `false` means it will never expire.
				 */
				expiration: number | false;
				/**
				 * Random token that can be provided in the URL to bypass the cached version of the asset, by requesting the asset
				 * with a __prerender_bypass=<token> cookie.
				 *
				 * Making a `GET` or `HEAD` request with `x-prerender-revalidate: <token>` will force the asset to be re-validated.
				 */
				bypassToken?: string;
				/**
				 * List of query string parameter names that will be cached independently. If an empty array, query values are not considered for caching. If undefined each unique query value is cached independently
				 */
				allowQuery?: string[] | undefined;
		  }
		| false;
}

type ImageFormat = 'image/avif' | 'image/webp';

type RemotePattern = {
	protocol?: 'http' | 'https';
	hostname: string;
	port?: string;
	pathname?: string;
};

type ImagesConfig = {
	sizes: number[];
	domains: string[];
	remotePatterns?: RemotePattern[];
	minimumCacheTTL?: number; // seconds
	formats?: ImageFormat[];
	dangerouslyAllowSVG?: boolean;
	contentSecurityPolicy?: string;
	contentDispositionType?: string;
};

/** @deprecated */
export interface EdgeConfig {
	/**
	 * Whether to use [Edge Functions](https://vercel.com/docs/concepts/functions/edge-functions) (`'edge'`) or [Serverless Functions](https://vercel.com/docs/concepts/functions/serverless-functions) (`'nodejs18.x'`, `'nodejs20.x'` etc).
	 */
	runtime?: 'edge';
	/**
	 * To which regions to deploy the app. A list of regions or `'all'`.
	 * More info: https://vercel.com/docs/concepts/edge-network/regions
	 */
	regions?: string[] | 'all';
	/**
	 * List of packages that should not be bundled into the Edge Function.
	 * Edge only.
	 */
	external?: string[];
	/**
	 * If `true`, this route will always be deployed as its own separate function
	 */
	split?: boolean;
}

export type Config = (EdgeConfig | ServerlessConfig) & {
	/**
	 * https://vercel.com/docs/build-output-api/v3/configuration#images
	 */
	images?: ImagesConfig;
};
